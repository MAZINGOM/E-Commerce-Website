#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfService2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventHelpersDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertFirstAider(FirstAider instance);
    partial void UpdateFirstAider(FirstAider instance);
    partial void DeleteFirstAider(FirstAider instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertLoginTable(LoginTable instance);
    partial void UpdateLoginTable(LoginTable instance);
    partial void DeleteLoginTable(LoginTable instance);
    partial void InsertMedic(Medic instance);
    partial void UpdateMedic(Medic instance);
    partial void DeleteMedic(Medic instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EventHelpersDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<FirstAider> FirstAiders
		{
			get
			{
				return this.GetTable<FirstAider>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<LoginTable> LoginTables
		{
			get
			{
				return this.GetTable<LoginTable>();
			}
		}
		
		public System.Data.Linq.Table<Medic> Medics
		{
			get
			{
				return this.GetTable<Medic>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bookings")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EMP_ID;
		
		private string _Event_Id;
		
		private int _Invoice_Id;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    partial void OnEvent_IdChanging(string value);
    partial void OnEvent_IdChanged();
    partial void OnInvoice_IdChanging(int value);
    partial void OnInvoice_IdChanged();
    #endregion
		
		public Booking()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Event = default(EntityRef<Event>);
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Event_Id
		{
			get
			{
				return this._Event_Id;
			}
			set
			{
				if ((this._Event_Id != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvent_IdChanging(value);
					this.SendPropertyChanging();
					this._Event_Id = value;
					this.SendPropertyChanged("Event_Id");
					this.OnEvent_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_Id", DbType="Int NOT NULL")]
		public int Invoice_Id
		{
			get
			{
				return this._Invoice_Id;
			}
			set
			{
				if ((this._Invoice_Id != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoice_IdChanging(value);
					this.SendPropertyChanging();
					this._Invoice_Id = value;
					this.SendPropertyChanged("Invoice_Id");
					this.OnInvoice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Booking", Storage="_Employee", ThisKey="EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._EMP_ID = value.EMP_ID;
					}
					else
					{
						this._EMP_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Booking", Storage="_Event", ThisKey="Event_Id", OtherKey="Event_Id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._Event_Id = value.Event_Id;
					}
					else
					{
						this._Event_Id = default(string);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Booking", Storage="_Invoice", ThisKey="Invoice_Id", OtherKey="Invoice_Id", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._Invoice_Id = value.Invoice_Id;
					}
					else
					{
						this._Invoice_Id = default(int);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EMP_ID;
		
		private string _EMP_Name;
		
		private string _EMP_Surname;
		
		private string _EMP_Contact;
		
		private string _EMP_Address;
		
		private EntitySet<Booking> _Bookings;
		
		private EntitySet<FirstAider> _FirstAiders;
		
		private EntitySet<LoginTable> _LoginTables;
		
		private EntitySet<Medic> _Medics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    partial void OnEMP_NameChanging(string value);
    partial void OnEMP_NameChanged();
    partial void OnEMP_SurnameChanging(string value);
    partial void OnEMP_SurnameChanged();
    partial void OnEMP_ContactChanging(string value);
    partial void OnEMP_ContactChanged();
    partial void OnEMP_AddressChanging(string value);
    partial void OnEMP_AddressChanged();
    #endregion
		
		public Employee()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._FirstAiders = new EntitySet<FirstAider>(new Action<FirstAider>(this.attach_FirstAiders), new Action<FirstAider>(this.detach_FirstAiders));
			this._LoginTables = new EntitySet<LoginTable>(new Action<LoginTable>(this.attach_LoginTables), new Action<LoginTable>(this.detach_LoginTables));
			this._Medics = new EntitySet<Medic>(new Action<Medic>(this.attach_Medics), new Action<Medic>(this.detach_Medics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EMP_Name
		{
			get
			{
				return this._EMP_Name;
			}
			set
			{
				if ((this._EMP_Name != value))
				{
					this.OnEMP_NameChanging(value);
					this.SendPropertyChanging();
					this._EMP_Name = value;
					this.SendPropertyChanged("EMP_Name");
					this.OnEMP_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_Surname", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EMP_Surname
		{
			get
			{
				return this._EMP_Surname;
			}
			set
			{
				if ((this._EMP_Surname != value))
				{
					this.OnEMP_SurnameChanging(value);
					this.SendPropertyChanging();
					this._EMP_Surname = value;
					this.SendPropertyChanged("EMP_Surname");
					this.OnEMP_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_Contact", DbType="VarChar(50)")]
		public string EMP_Contact
		{
			get
			{
				return this._EMP_Contact;
			}
			set
			{
				if ((this._EMP_Contact != value))
				{
					this.OnEMP_ContactChanging(value);
					this.SendPropertyChanging();
					this._EMP_Contact = value;
					this.SendPropertyChanged("EMP_Contact");
					this.OnEMP_ContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EMP_Address
		{
			get
			{
				return this._EMP_Address;
			}
			set
			{
				if ((this._EMP_Address != value))
				{
					this.OnEMP_AddressChanging(value);
					this.SendPropertyChanging();
					this._EMP_Address = value;
					this.SendPropertyChanged("EMP_Address");
					this.OnEMP_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Booking", Storage="_Bookings", ThisKey="EMP_ID", OtherKey="EMP_ID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FirstAider", Storage="_FirstAiders", ThisKey="EMP_ID", OtherKey="EMP_ID")]
		public EntitySet<FirstAider> FirstAiders
		{
			get
			{
				return this._FirstAiders;
			}
			set
			{
				this._FirstAiders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LoginTable", Storage="_LoginTables", ThisKey="EMP_ID", OtherKey="EMP_ID")]
		public EntitySet<LoginTable> LoginTables
		{
			get
			{
				return this._LoginTables;
			}
			set
			{
				this._LoginTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Medic", Storage="_Medics", ThisKey="EMP_ID", OtherKey="EMP_ID")]
		public EntitySet<Medic> Medics
		{
			get
			{
				return this._Medics;
			}
			set
			{
				this._Medics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FirstAiders(FirstAider entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FirstAiders(FirstAider entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_LoginTables(LoginTable entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_LoginTables(LoginTable entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Medics(Medic entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Medics(Medic entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Event_Id;
		
		private string _Event_Name;
		
		private System.DateTime _Event_Date_Time;
		
		private string _Event_Address;
		
		private System.Nullable<int> _Event_Num_People;
		
		private EntitySet<Booking> _Bookings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvent_IdChanging(string value);
    partial void OnEvent_IdChanged();
    partial void OnEvent_NameChanging(string value);
    partial void OnEvent_NameChanged();
    partial void OnEvent_Date_TimeChanging(System.DateTime value);
    partial void OnEvent_Date_TimeChanged();
    partial void OnEvent_AddressChanging(string value);
    partial void OnEvent_AddressChanged();
    partial void OnEvent_Num_PeopleChanging(System.Nullable<int> value);
    partial void OnEvent_Num_PeopleChanged();
    #endregion
		
		public Event()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Event_Id
		{
			get
			{
				return this._Event_Id;
			}
			set
			{
				if ((this._Event_Id != value))
				{
					this.OnEvent_IdChanging(value);
					this.SendPropertyChanging();
					this._Event_Id = value;
					this.SendPropertyChanged("Event_Id");
					this.OnEvent_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Event_Name
		{
			get
			{
				return this._Event_Name;
			}
			set
			{
				if ((this._Event_Name != value))
				{
					this.OnEvent_NameChanging(value);
					this.SendPropertyChanging();
					this._Event_Name = value;
					this.SendPropertyChanged("Event_Name");
					this.OnEvent_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Date_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Event_Date_Time
		{
			get
			{
				return this._Event_Date_Time;
			}
			set
			{
				if ((this._Event_Date_Time != value))
				{
					this.OnEvent_Date_TimeChanging(value);
					this.SendPropertyChanging();
					this._Event_Date_Time = value;
					this.SendPropertyChanged("Event_Date_Time");
					this.OnEvent_Date_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Address", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Event_Address
		{
			get
			{
				return this._Event_Address;
			}
			set
			{
				if ((this._Event_Address != value))
				{
					this.OnEvent_AddressChanging(value);
					this.SendPropertyChanging();
					this._Event_Address = value;
					this.SendPropertyChanged("Event_Address");
					this.OnEvent_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event_Num_People", DbType="Int")]
		public System.Nullable<int> Event_Num_People
		{
			get
			{
				return this._Event_Num_People;
			}
			set
			{
				if ((this._Event_Num_People != value))
				{
					this.OnEvent_Num_PeopleChanging(value);
					this.SendPropertyChanging();
					this._Event_Num_People = value;
					this.SendPropertyChanged("Event_Num_People");
					this.OnEvent_Num_PeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Booking", Storage="_Bookings", ThisKey="Event_Id", OtherKey="Event_Id")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FirstAider")]
	public partial class FirstAider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FA_Id;
		
		private string _EMP_ID;
		
		private string _Certificate;
		
		private System.DateTime _Expire_Date;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFA_IdChanging(int value);
    partial void OnFA_IdChanged();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    partial void OnCertificateChanging(string value);
    partial void OnCertificateChanged();
    partial void OnExpire_DateChanging(System.DateTime value);
    partial void OnExpire_DateChanged();
    #endregion
		
		public FirstAider()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FA_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FA_Id
		{
			get
			{
				return this._FA_Id;
			}
			set
			{
				if ((this._FA_Id != value))
				{
					this.OnFA_IdChanging(value);
					this.SendPropertyChanging();
					this._FA_Id = value;
					this.SendPropertyChanged("FA_Id");
					this.OnFA_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Certificate", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Certificate
		{
			get
			{
				return this._Certificate;
			}
			set
			{
				if ((this._Certificate != value))
				{
					this.OnCertificateChanging(value);
					this.SendPropertyChanging();
					this._Certificate = value;
					this.SendPropertyChanged("Certificate");
					this.OnCertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expire_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Expire_Date
		{
			get
			{
				return this._Expire_Date;
			}
			set
			{
				if ((this._Expire_Date != value))
				{
					this.OnExpire_DateChanging(value);
					this.SendPropertyChanging();
					this._Expire_Date = value;
					this.SendPropertyChanged("Expire_Date");
					this.OnExpire_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FirstAider", Storage="_Employee", ThisKey="EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FirstAiders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FirstAiders.Add(this);
						this._EMP_ID = value.EMP_ID;
					}
					else
					{
						this._EMP_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Invoice_Id;
		
		private decimal _Price;
		
		private EntitySet<Booking> _Bookings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoice_IdChanging(int value);
    partial void OnInvoice_IdChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Invoice()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Invoice_Id
		{
			get
			{
				return this._Invoice_Id;
			}
			set
			{
				if ((this._Invoice_Id != value))
				{
					this.OnInvoice_IdChanging(value);
					this.SendPropertyChanging();
					this._Invoice_Id = value;
					this.SendPropertyChanged("Invoice_Id");
					this.OnInvoice_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Booking", Storage="_Bookings", ThisKey="Invoice_Id", OtherKey="Invoice_Id")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginTable")]
	public partial class LoginTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EMP_ID;
		
		private string _EMP_Password;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    partial void OnEMP_PasswordChanging(string value);
    partial void OnEMP_PasswordChanged();
    #endregion
		
		public LoginTable()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_Password", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EMP_Password
		{
			get
			{
				return this._EMP_Password;
			}
			set
			{
				if ((this._EMP_Password != value))
				{
					this.OnEMP_PasswordChanging(value);
					this.SendPropertyChanging();
					this._EMP_Password = value;
					this.SendPropertyChanged("EMP_Password");
					this.OnEMP_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LoginTable", Storage="_Employee", ThisKey="EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.LoginTables.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.LoginTables.Add(this);
						this._EMP_ID = value.EMP_ID;
					}
					else
					{
						this._EMP_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medic")]
	public partial class Medic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _M_Id;
		
		private string _Degree;
		
		private string _EMP_ID;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnM_IdChanging(int value);
    partial void OnM_IdChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    #endregion
		
		public Medic()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int M_Id
		{
			get
			{
				return this._M_Id;
			}
			set
			{
				if ((this._M_Id != value))
				{
					this.OnM_IdChanging(value);
					this.SendPropertyChanging();
					this._M_Id = value;
					this.SendPropertyChanged("M_Id");
					this.OnM_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Medic", Storage="_Employee", ThisKey="EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Medics.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Medics.Add(this);
						this._EMP_ID = value.EMP_ID;
					}
					else
					{
						this._EMP_ID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
